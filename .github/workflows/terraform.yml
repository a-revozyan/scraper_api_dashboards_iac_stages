name: 'Terraform'

on:
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:


permissions:
  contents: read

jobs:
  terraform_first_step:
    name: 'Terraform - FIRST STEP'
    runs-on: ubuntu-latest
    environment: production
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.3.6

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: cd dev_stage/first_step && terraform init

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: cd dev_stage/first_step && terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: cd dev_stage/first_step && terraform apply -auto-approve -input=false

    - name: Build and push images to ECRs
      run: |
        curl --request POST \
        --url 'https://api.github.com/repos/arevozyan/scraper_api_dashboards/actions/workflows/docker-image.yml/dispatches' \
        --header 'authorization: Bearer ${{secrets.ACCESS_TOKEN_APP_REPO}}' \
        --data '{"ref": "main"}'
#        curl -X POST \
#        -H "Authorization: Bearer ${{secrets.ACCESS_TOKEN_APP_REPO}}" \
#        -H "Accept: application/vnd.github.v3+json" \
#        https://api.github.com/repos/arevozyan/scraper_api_dashboards/actions/workflows/docker-image.yml/dispatches \
#        -d '{"ref": "main"}


  terraform_second_step:
    needs: [terraform_first_step]
    name: 'Terraform - SECOND STEP'
    runs-on: ubuntu-latest
    environment: production
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.3.6

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: cd dev_stage/second_step && terraform init

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: cd dev_stage/second_step && terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: cd dev_stage/second_step && terraform apply -auto-approve -input=false
